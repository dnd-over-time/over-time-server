name: overtime Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test
          echo "Build completed. Checking output:"
          ls -la build/libs/
      
      - name: Setup SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Prepare server directories
        run: |
          ssh -i ~/.ssh/private_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            mkdir -p ~/app/backups
            mkdir -p ~/app/logs
          "
      


      - name: Copy JAR to server
        run: |
          echo "Available JAR files:"
          ls -la build/libs/
    
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "No executable JAR file found!"
            exit 1
          fi
          echo "Selected JAR file: $JAR_FILE"
    
          ssh -i ~/.ssh/private_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            cd ~/app
            if [ -f app.jar ]; then 
              cp app.jar backups/app_$(date +%Y%m%d_%H%M%S).jar
            fi
            rm -rf app.jar
          "
    
          scp -i ~/.ssh/private_key.pem "$JAR_FILE" ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:~/app/app.jar
    
          ssh -i ~/.ssh/private_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            cd ~/app
            echo 'File transferred successfully:'
            ls -la app.jar
            file app.jar
          "
      
      - name: Stop running application
        run: |
          ssh -i ~/.ssh/private_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            if [ -f ~/app/app.pid ]; then
              PID=\$(cat ~/app/app.pid)
              if ps -p \$PID > /dev/null; then
                kill \$PID
                sleep 10
                if ps -p \$PID > /dev/null; then
                  kill -9 \$PID
                fi
              fi
              rm ~/app/app.pid
            fi
            
            # 8088 포트 사용 중인 프로세스 종료
            lsof -ti:8088 | xargs kill -9 2>/dev/null || true
          "
      - name: Debug JAR file
        run: |
          ssh -i ~/.ssh/private_key.pem ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            cd ~/app
            echo '=== JAR file verification ==='
            echo 'File details:'
            ls -la app.jar
            echo 'File type:'
            file app.jar
            echo 'File size:'
            du -h app.jar
            echo 'File header (first 100 bytes):'
            head -c 100 app.jar | xxd
            echo 'Testing JAR file structure:'
            unzip -t app.jar >/dev/null 2>&1 && echo 'JAR structure: OK' || echo 'JAR structure: CORRUPTED'
          "

      
      - name: Deploy and run application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            export SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export SERVER_PORT=8088 

            export ADMIN_KEY='${{ secrets.ADMIN_KEY }}'

            export KAKAO_KAKAO_CLIENT_ID='${{ secrets.KAKAO_CLIENT_ID }}'
            export KAKAO_KAKAO_REDIRECT_URL='${{ secrets.KAKAO_REDIRECT_URL }}'
            
            cd ~/app
            nohup java -jar app.jar > logs/app.log 2>&1 &
            echo $! > app.pid
            
            sleep 30  # 30초로 늘림
      
            echo "=== 전체 로그 확인 ==="
            cat logs/app.log
      
            echo "=== 프로세스 상태 확인 ==="
            if ps -p $(cat app.pid) > /dev/null; then
              echo "Process is running"
              if lsof -Pi :8088 -sTCP:LISTEN -t >/dev/null; then
                echo "8088 port is listening - SUCCESS"
              else
                echo "8088 port is NOT listening"
                echo "=== 포트 사용 현황 ==="
                netstat -tulpn | grep :8088 || echo "No process using 8088"
                echo "=== 모든 LISTEN 포트 확인 ==="
                netstat -tulpn | grep LISTEN
                exit 1
              fi
            else
              echo "Process is NOT running"
              echo "=== 전체 로그 ==="
              cat logs/app.log
              exit 1
            fi
